@auth.requires_login()
def index():
    sub_venda = db.sub_venda(request.args(0, cast=int))
    rows = db((db.classe_despesa_cobranca.sub_venda == sub_venda.id)&(db.classe_despesa_cobranca.tipo == "Despesa_Cobranca")).select()
    return locals()
@auth.requires_login()
def criar_class_desp():
    response.view = 'generic.html' # use a generic view
    sub_venda = db.sub_venda(request.args(0, cast=int))
    
    db.classe_despesa_cobranca.sub_venda.default = sub_venda.id
    db.classe_despesa_cobranca.sub_venda.writable = False
    

    form = SQLFORM(db.classe_despesa_cobranca).process()
    if form.accepted:
        response.flash = 'Formulario aceito'
        redirect(URL('index', args=[sub_venda.id]))
    elif form.errors:
        response.flash = 'Formulario não aceito'
    else:
        response.flash = 'Preencha o formulario'
    return dict(form=form)
@auth.requires_login()
def alterar_class_desp():
    response.view = 'generic.html' # use a generic view
    classe_despesa_cobranca = db.classe_despesa_cobranca(request.args(0, cast=int))
    sub_venda = db.sub_venda(classe_despesa_cobranca.sub_venda)
    db.classe_despesa_cobranca.id.readable = False
    db.classe_despesa_cobranca.id.writable = False
    db.classe_despesa_cobranca.sub_venda.readable = False
    db.classe_despesa_cobranca.sub_venda.writable = False
    if auth.user.id==1:
      db.classe_despesa_cobranca.tipo.label = "#Programador (Tipo)"
      db.classe_despesa_cobranca.tipo.readable = True
      db.classe_despesa_cobranca.tipo.writable = True
      
    form = SQLFORM(db.classe_despesa_cobranca, request.args(0, cast=int), deletable=False)
    if form.process().accepted:
        session.flash = 'Atualizado'
        redirect(URL('index', args=[sub_venda.id]))
    elif form.errors:
        response.flash = 'Erros no formulário!'
    else:
        if not response.flash:
            response.flash = 'Preencha o formulário!'
    return dict(form=form)

@auth.requires_login()
def acesso_despesa():
    classe_despesa_cobranca = db.classe_despesa_cobranca(request.args(0, cast=int))
    sub_venda = db.sub_venda(classe_despesa_cobranca.sub_venda)
    rows = db((db.despesa_cobranca.classe_despesa_cobranca == classe_despesa_cobranca.id)&(db.despesa_cobranca.tipo == "Despesa_Cobranca")).select(orderby=db.despesa_cobranca.data_inicio)
    return locals()

@auth.requires_login()
def criar_desp():
    response.view = 'generic.html' # use a generic view
    classe_despesa_cobranca = db.classe_despesa_cobranca(request.args(0, auth.user))
    variavel=0
    variavel=request.args(1, auth.user)
    if variavel>=1:
        response.flash = 'Entrou no if'
        newdespesa = db(db.despesa_cobranca.classe_despesa_cobranca == classe_despesa_cobranca.id).select().last()
        db.despesa_cobranca.insert(classe_despesa_cobranca=classe_despesa_cobranca.id, data_inicio=request.now , descricao=newdespesa.descricao , valor=newdespesa.valor)
        return redirect(URL('acesso_despesa', args=[classe_despesa_cobranca.id]))
    db.despesa_cobranca.classe_despesa_cobranca.default = classe_despesa_cobranca.id
    db.despesa_cobranca.classe_despesa_cobranca.writable = False

    db.despesa_cobranca.sub_venda.default = classe_despesa_cobranca.sub_venda
    form = SQLFORM(db.despesa_cobranca).process()
    if form.accepted:
        response.flash = 'Formulario aceito'
        redirect(URL('acesso_despesa', args=[classe_despesa_cobranca.id]))
    elif form.errors:
        response.flash = 'Formulario não aceito'
    else:
        response.flash = 'Preencha o formulario'
    return dict(form=form)
@auth.requires_login()
def alterar_desp():
    response.view = 'generic.html' # use a generic view
    despesa_cobranca = db.despesa_cobranca(request.args(0, cast=int))
    classe_despesa_cobranca = db.classe_despesa_cobranca(despesa_cobranca.classe_despesa_cobranca)
    
    db.despesa_cobranca.id.readable = False
    db.despesa_cobranca.id.writable = False
    
    db.despesa_cobranca.classe_despesa_cobranca.readable = False
    db.despesa_cobranca.classe_despesa_cobranca.writable = False
    if auth.user.id==1:
      db.despesa_cobranca.tipo.label = "#Programador (Tipo)"
      db.despesa_cobranca.tipo.readable = True
      db.despesa_cobranca.tipo.writable = True

    form = SQLFORM(db.despesa_cobranca, request.args(0, cast=int), deletable=True)
    if form.process().accepted:
        session.flash = 'Atualizado'
        redirect(URL('acesso_despesa', args=[classe_despesa_cobranca.id]))
    elif form.errors:
        response.flash = 'Erros no formulário!'
    else:
        if not response.flash:
            response.flash = 'Preencha o formulário!'
    return dict(form=form)

def acessar_dia_despesa():
#     response.view = 'generic.html' # use a generic view
    lista_atualizacao = db(db.despesa_cobranca.sub_venda==None).select()
    for despesa_cob in lista_atualizacao:
      classe_despesa_cobranca = db.classe_despesa_cobranca(despesa_cob.classe_despesa_cobranca)
      despesa_cob.sub_venda=classe_despesa_cobranca.sub_venda
      despesa_cob.update_record()
    sub_venda = db.sub_venda(request.args(0, cast=int))
    data = (request.args(1))
    rows = db((db.despesa_cobranca.sub_venda==sub_venda.id)&(db.despesa_cobranca.data_inicio==data)&(db.despesa_cobranca.tipo == "Despesa_Cobranca")).select(orderby=db.despesa_cobranca.data_inicio)
  #   ajuste= db((db.despesa)).select()
  #   for row in ajuste:
  #     row.tipo=row.classe_despesa.tipo
  #     row.projeto=row.classe_despesa.projeto
  #     row.update_record()
    return locals()

def lista_despesa_local_cobranca():
    db(db.sub_venda).update(total_despesa_local=0)
    sub_venda = db.sub_venda(request.args(0, cast=int))
    rows = db((db.classe_despesa_cobranca.sub_venda == sub_venda.id)&(db.classe_despesa_cobranca.tipo == "Despesa_Local_Cobranca")).select()
    return locals()
  
def adicionar_pasta_despesa_local_cobranca():
    
    response.view = 'generic.html' # use a generic view
    sub_venda = db.sub_venda(request.args(0, cast=int))
    
    db.classe_despesa_cobranca.tipo.default = "Despesa_Local_Cobranca"
    db.classe_despesa_cobranca.sub_venda.default = sub_venda.id
    db.classe_despesa_cobranca.sub_venda.writable = False
    

    form = SQLFORM(db.classe_despesa_cobranca).process()
    if form.accepted:
        response.flash = 'Formulario aceito'
        redirect(URL('lista_despesa_local_cobranca', args=[sub_venda.id]))
    elif form.errors:
        response.flash = 'Formulario não aceito'
    else:
        response.flash = 'Preencha o formulario'
    return dict(form=form)
def alterar_pasta_despesa_local_cobranca():
    response.view = 'generic.html' # use a generic view
    classe_despesa_cobranca = db.classe_despesa_cobranca(request.args(0, cast=int))
    sub_venda = db.sub_venda(classe_despesa_cobranca.sub_venda)
    db.classe_despesa_cobranca.id.readable = False
    db.classe_despesa_cobranca.id.writable = False
    db.classe_despesa_cobranca.sub_venda.readable = False
    db.classe_despesa_cobranca.sub_venda.writable = False
    if auth.user.id==1:
      db.classe_despesa_cobranca.tipo.label = "#Programador (Tipo)"
      db.classe_despesa_cobranca.tipo.readable = True
      db.classe_despesa_cobranca.tipo.writable = True
      
    form = SQLFORM(db.classe_despesa_cobranca, request.args(0, cast=int), deletable=False)
    if form.process().accepted:
        session.flash = 'Atualizado'
        redirect(URL('lista_despesa_local_cobranca', args=[sub_venda.id]))
    elif form.errors:
        response.flash = 'Erros no formulário!'
    else:
        if not response.flash:
            response.flash = 'Preencha o formulário!'
    return dict(form=form)
def acessar_pasta_despesa_local_cobranca():
    classe_despesa_cobranca = db.classe_despesa_cobranca(request.args(0, cast=int))
    sub_venda = db.sub_venda(classe_despesa_cobranca.sub_venda)
    rows = db((db.despesa_cobranca.classe_despesa_cobranca == classe_despesa_cobranca.id)&(db.despesa_cobranca.tipo == "Despesa_Local_Cobranca")).select(orderby=db.despesa_cobranca.data_inicio)
    return locals()
def adicionar_despesa_local_cobranca():
    response.view = 'generic.html' # use a generic view
    classe_despesa_cobranca = db.classe_despesa_cobranca(request.args(0, auth.user))
    variavel=0
    variavel=request.args(1, auth.user)
    if variavel>=1:
        response.flash = 'Entrou no if'
        newdespesa = db(db.despesa_cobranca.classe_despesa_cobranca == classe_despesa_cobranca.id).select().last()
        db.despesa_cobranca.insert(classe_despesa_cobranca=classe_despesa_cobranca.id, data_inicio=request.now , descricao=newdespesa.descricao , valor=newdespesa.valor)
        return redirect(URL('acesso_despesa', args=[classe_despesa_cobranca.id]))
    db.despesa_cobranca.classe_despesa_cobranca.default = classe_despesa_cobranca.id
    db.despesa_cobranca.tipo.default = "Despesa_Local_Cobranca"
    db.despesa_cobranca.classe_despesa_cobranca.writable = False

    db.despesa_cobranca.sub_venda.default = classe_despesa_cobranca.sub_venda
    form = SQLFORM(db.despesa_cobranca).process()
    if form.accepted:
        response.flash = 'Formulario aceito'
        redirect(URL('acessar_pasta_despesa_local_cobranca', args=[classe_despesa_cobranca.id]))
    elif form.errors:
        response.flash = 'Formulario não aceito'
    else:
        response.flash = 'Preencha o formulario'
    return dict(form=form)
def alterar_despesa_local_cobranca():
    response.view = 'generic.html' # use a generic view
    despesa_cobranca = db.despesa_cobranca(request.args(0, cast=int))
    classe_despesa_cobranca = db.classe_despesa_cobranca(despesa_cobranca.classe_despesa_cobranca)
    
    db.despesa_cobranca.id.readable = False
    db.despesa_cobranca.id.writable = False
    
    db.despesa_cobranca.classe_despesa_cobranca.readable = False
    db.despesa_cobranca.classe_despesa_cobranca.writable = False
    if auth.user.id==1:
      db.despesa_cobranca.tipo.label = "#Programador (Tipo)"
      db.despesa_cobranca.tipo.readable = True
      db.despesa_cobranca.tipo.writable = True
      db.despesa_cobranca.classe_despesa_cobranca.label = "#Programador (Classe)"
      db.despesa_cobranca.classe_despesa_cobranca.readable = True
      db.despesa_cobranca.classe_despesa_cobranca.writable = True


    form = SQLFORM(db.despesa_cobranca, request.args(0, cast=int), deletable=True)
    if form.process().accepted:
        session.flash = 'Atualizado'
        redirect(URL('acessar_pasta_despesa_local_cobranca', args=[classe_despesa_cobranca.id]))
    elif form.errors:
        response.flash = 'Erros no formulário!'
    else:
        if not response.flash:
            response.flash = 'Preencha o formulário!'
    return dict(form=form)
