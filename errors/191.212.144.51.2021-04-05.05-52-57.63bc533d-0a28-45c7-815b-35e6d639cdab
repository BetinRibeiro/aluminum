(dp1
S'output'
p2
S'missing "pass" in view'
p3
sS'layer'
p4
S'ParserContainer'
p5
sS'code'
p6
S'response.write(\'<!DOCTYPE html>\\n<!--[if (gt IE 9)|!(IE)]><!--> <html class="no-js" lang="\', escape=False)\nresponse.write(T.accepted_language or \'en\')\nresponse.write(\'"> <!--<![endif]-->\\n  <head>\\n    <meta charset="utf-8">\\n    <!-- www.phpied.com/conditional-comments-block-downloads/ -->\\n    <!-- Always force latest IE rendering engine\\n         (even in intranet) & Chrome Frame\\n         Remove this if you use the .htaccess -->\\n    <meta http-equiv="X-UA-Compatible" content="IE=edge\', escape=False)\nresponse.write(not request.is_local and \',chrome=1\' or \'\')\nresponse.write(\'">\\n    <!--  Mobile Viewport Fix\\n          j.mp/mobileviewport & davidbcalhoun.com/2010/viewport-metatag\\n          device-width: Occupy full width of the screen in its current orientation\\n          initial-scale = 1.0 retains dimensions instead of zooming out if page height > device height\\n          user-scalable = yes allows the user to zoom in -->\\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\\n       <title>Aluminum System</title>\\n    <!-- http://dev.w3.org/html5/markup/meta.name.html -->\\n    <meta name="application-name" content="sistema credi\\xc3\\xa1rio panela">\\n    <!-- Speaking of Google, don\\\'t forget to set your site up:\\n         http://google.com/webmasters -->\\n    <meta name="google-site-verification" content="peneleiro Juazeiro, panela credi\\xc3\\xa1rio, sistema panela">\\n    <!-- include stylesheets -->\\n    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css"/>\\n    <link rel="stylesheet" href="\', escape=False)\nresponse.write(URL(\'static\',\'css/bootstrap.min.css\'))\nresponse.write(\'"/>\\n    <link rel="stylesheet" href="\', escape=False)\nresponse.write(URL(\'static\',\'css/web2py-bootstrap4.css\'))\nresponse.write(\'"/>\\n    <link rel="shortcut icon" href="\', escape=False)\nresponse.write(URL(\'static\',\'images/ico.ico\'))\nresponse.write(\'" type="image/x-icon">\\n    <link rel="apple-touch-icon" href="\', escape=False)\nresponse.write(URL(\'static\',\'images/ico.png\'))\nresponse.write(\'">\\n    <!-- All JavaScript at the bottom, except for Modernizr which enables\\n         HTML5 elements & feature detects -->\\n    <script src="\', escape=False)\nresponse.write(URL(\'static\',\'js/modernizr-2.8.3.min.js\'))\nresponse.write(\'"></script>\\n    <!-- Favicons -->\\n    \', escape=False)\nresponse.write(\'<script type="text/javascript"><!--\\n    // These variables are used by the web2py_ajax_init function in web2py_ajax.js (which is loaded below).\\n    \', escape=False)\nresponse.write(ASSIGNJS(\nw2p_ajax_confirm_message = T(\'Are you sure you want to delete this object?\'),\nw2p_ajax_disable_with_message = T(\'Working...\'),\nw2p_ajax_date_format = T(\'%Y-%m-%d\'),\nw2p_ajax_datetime_format = T(\'%Y-%m-%d %H:%M:%S\'),\najax_error_500 = T.M(\'An error occured, please [[reload %s]] the page\') % URL(args=request.args, vars=request.get_vars)\n))\nresponse.write(\'\\n    //--></script>\\n\', escape=False)\nresponse.files.insert(0,URL(\'static\',\'js/jquery.js\'))\nresponse.files.insert(1,URL(\'static\',\'css/calendar.css\'))\nresponse.files.insert(2,URL(\'static\',\'js/calendar.js\'))\nresponse.files.insert(3,URL(\'static\',\'js/web2py.js\'))\nresponse.include_meta()\nresponse.include_files()\nresponse.write(\'\\n\', escape=False)\nresponse.write(\' <!-- this includes jquery.js, calendar.js/.css and web2py.js -->\\n    \', escape=False)\nresponse.write(\'\\n              \', escape=False)\nif auth.user:\n    response.write(\'\\n    \', escape=False)\n    if auth.user.first_name=="Rogoberto":\n        response.write(\'\\n    <link rel="stylesheet" href="https://bootswatch.com/4/slate/bootstrap.css">\\n   \\n    \', escape=False)\n        if auth.user.first_name=="meme":\n            response.write(\'\\n    <link rel="stylesheet" href="https://bootswatch.com/4/slate/bootstrap.css"> \\n    \', escape=False)\n            pass\n        response.write(\'\\n    \', escape=False)\n        pass\n    response.write(\'\\n  </head>\\n  <body>\\n      \\n        <style  type="text/css">\\n    @media print{\\n        .btn{\\n             display: none;\\n        }\\n        #noprint { display:none; } \\n      a:link{font:15px "verdana"; color:#8B4513; text-decoration:none;}\\n\\na:hover{font:20px "verdana"; color:black; text-decoration:underline;}\\n    }\\n      </style>\\n    <div class="w2p_flash alert alert-dismissable">\', escape=False)\n    response.write(response.flash or \'\')\n    response.write(\'</div>\\n    <!-- Navbar ======================================= -->\\n    <nav class="navbar navbar-light navbar-expand-md bg-faded justify-content-center">\\n        <a class="navbar-brand" href="https://rogoberto.pythonanywhere.com/aluminum/#acesso">Aluminum</a>\\n       <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNavDropdown" aria-controls="navbarNavDropdown" aria-expanded="false" aria-label="Toggle navigation">\\n         <span class="navbar-toggler-icon"></span>\\n       </button>\\n       <div class="navbar-collapse collapse w-100" id="navbarNavDropdown">\\n         <ul class="navbar-nav w-100 justify-content-center">\\n          \', escape=False)\n    for _item in response.menu or []:\n        response.write(\'\\n          \', escape=False)\n        if (not len(_item)>4) or not _item[3]:\n            response.write(\'\\n          <li class="nav-item \', escape=False)\n            if _item[1]:\n                response.write(\'active\', escape=False)\n                pass\n            response.write(\'">\\n            <a class="nav-link" href="\', escape=False)\n            response.write(_item[2])\n            response.write(\'">\', escape=False)\n            response.write(_item[0])\n            response.write(\'</a>\\n          </li>\\n          \', escape=False)\n        else:\n            response.write(\'\\n          <li class="nav-item dropdown">\\n            <a class="nav-link dropdown-toggle" href="\', escape=False)\n            response.write(_item[2])\n            response.write(\'" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\', escape=False)\n            response.write(_item[0])\n            response.write(\'</a>\\n            <div class="dropdown-menu">\\n              \', escape=False)\n            for _subitem in _item[3]:\n                response.write(\'\\n              <a class="dropdown-item" href="\', escape=False)\n                response.write(_subitem[2])\n                response.write(\'">\', escape=False)\n                response.write(_subitem[0])\n                response.write(\'</a>\\n              \', escape=False)\n                pass\n            response.write(\'\\n            </div>\\n          </li>\\n          \', escape=False)\n            pass\n        response.write(\'\\n          \', escape=False)\n        pass\n    response.write(\'\\n        </ul>\\n\\n        \', escape=False)\n    if \'auth\' in globals():\n        response.write(\'\\n        <ul class="nav navbar-nav ml-auto w-100 justify-content-end">\\n          <li class="nav-item dropdown">\\n            <a class="nav-link dropdown-toggle" href="#" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\\n              \', escape=False)\n        if auth.user:\n            response.write(auth.user.first_name)\n        else:\n            response.write(\'LOGIN\', escape=False)\n            pass\n        response.write(\'\\n            </a>\\n            <div class="dropdown-menu dropdown-menu-right">\\n              \', escape=False)\n        if auth.user:\n            response.write(\'\\n              <a class="dropdown-item" href="\', escape=False)\n            response.write(URL(\'default\',\'user/profile\'))\n            response.write(\'">\', escape=False)\n            response.write(T(\'Profile\'))\n            response.write(\'</a>\\n              \', escape=False)\n            if \'change_password\' not in auth.settings.actions_disabled:\n                response.write(\'\\n              <a class="dropdown-item" href="\', escape=False)\n                response.write(URL(\'default\',\'user/change_password\'))\n                response.write(\'">\', escape=False)\n                response.write(T(\'Change Password\'))\n                response.write(\'</a>\\n              \', escape=False)\n                pass\n            response.write(\'\\n              <a class="dropdown-item" href="\', escape=False)\n            response.write(URL(\'default\',\'user/logout\'))\n            response.write(\'">\', escape=False)\n            response.write(T(\'Logout\'))\n            response.write(\'</a>\\n              \', escape=False)\n        else:\n            response.write(\'\\n              <a class="dropdown-item" href="\', escape=False)\n            response.write(URL(\'default\',\'user/login\'))\n            response.write(\'">\', escape=False)\n            response.write(T(\'Login\'))\n            response.write(\'</a>\\n              \', escape=False)\n            if \'register\' not in auth.settings.actions_disabled:\n                response.write(\'\\n              <a class="dropdown-item" href="\', escape=False)\n                response.write(URL(\'default\',\'user/register\'))\n                response.write(\'">\', escape=False)\n                response.write(T(\'Sign up\'))\n                response.write(\'</a>\\n              \', escape=False)\n                pass\n            response.write(\'\\n              \', escape=False)\n            if \'retrieve_password\' not in auth.settings.actions_disabled:\n                response.write(\'\\n              <a class="dropdown-item" href="\', escape=False)\n                response.write(URL(\'default\',\'user/retrieve_password\'))\n                response.write(\'">\', escape=False)\n                response.write(T(\'Lost Password\'))\n                response.write(\'</a>\\n              \', escape=False)\n                pass\n            response.write(\'\\n              \', escape=False)\n            pass\n        response.write(\'\\n            </div>\\n          </li>\\n        </ul>\\n        \', escape=False)\n        pass\n    response.write(\'\\n      </div>\\n    </nav>\\n\\n    <!-- Masthead ===================================== -->\\n    \', escape=False)\n    response.write(\'\\n<header class="header container-fluid d-none d-print-block">\\n     <div class="row">\\n        <div class="col-md-12">\\n          <div class="copyright pull-left">Aluminum System</div>\\n          <div id="poweredBy" class="pull-right">\\n            Gest\\xc3\\xa3o de vendas e cobran\\xc3\\xa7as artefatos de aluminio\\n            \\n          </div>\\n        </div>\\n      </div>\\n</header>\\n    \', escape=False)\n    response.write(\'\\n    <!-- Main ========================================= -->\\n    <!-- Begin page content -->\\n    <div class="container-fluid main-container">\\n      \', escape=False)\n    response.write(\'\\n<script><!--\\n    jQuery(document).ready(function(){\\n    jQuery("table.sortable tbody tr").mouseover( function() {\\n    jQuery(this).addClass("highlight"); }).mouseout( function() {\\n    jQuery(this).removeClass("highlight"); });\\n    jQuery(\\\'table.sortable tbody tr:odd\\\').addClass(\\\'odd\\\');\\n    jQuery(\\\'table.sortable tbody tr:even\\\').addClass(\\\'even\\\');\\n});\\n//--></script>\\n\\n<div class="row">\\n  <div class="col-md-12">\\n\\n\', escape=False)\n    if request.function==\'index\':\n        response.write(\'\\n<h2>\', escape=False)\n        response.write(T("Available Databases and Tables"))\n        response.write(\'</h2>\\n  \', escape=False)\n        if not databases:\n            response.write(T("No databases in this application"))\n            pass\n        response.write(\'\\n  <ul class="nav nav-tabs" id="myTab">\\n    <li class="nav-item"><a href="#alltables" data-toggle="tab" class="nav-link active">Tables</a></li>\\n    <li class="nav-item"><a href="#hooks" data-toggle="tab" class="nav-link">Hooks</a></li>\\n  </ul>\\n  <div class="tab-content">\\n      <div class="tab-pane active" id="alltables">\\n        <table class="table table-striped">\\n          \', escape=False)\n        for db in sorted(databases):\n            response.write(\'\\n            \', escape=False)\n            for table in databases[db].tables:\n                response.write(\'\\n              \', escape=False)\n                qry=\'%s.%s.id>0\'%(db,table)\n                response.write(\'\\n              \', escape=False)\n                tbl=databases[db][table]\n                response.write(\'\\n              \', escape=False)\n                if hasattr(tbl,\'_primarykey\'):\n                    response.write(\'\\n                \', escape=False)\n                    if tbl._primarykey:\n                        response.write(\'\\n                    \', escape=False)\n                        firstkey=tbl[tbl._primarykey[0]]\n                        response.write(\'\\n                    \', escape=False)\n                        if firstkey.type in [\'string\',\'text\']:\n                            response.write(\'\\n                      \', escape=False)\n                            qry=\'%s.%s.%s!=""\'%(db,table,firstkey.name)\n                            response.write(\'\\n                    \', escape=False)\n                        else:\n                            response.write(\'\\n                      \', escape=False)\n                            qry=\'%s.%s.%s>0\'%(db,table,firstkey.name)\n                            response.write(\'\\n                    \', escape=False)\n                            pass\n                        response.write(\'\\n                \', escape=False)\n                    else:\n                        response.write(\'\\n                     \', escape=False)\n                        qry=\'\'\n                        response.write(\'\\n                \', escape=False)\n                        pass\n                    response.write(\'\\n              \', escape=False)\n                    pass\n                response.write(\'\\n          <tr>\\n            <th style="font-size: 1.75em;">\\n              &raquo; \', escape=False)\n                response.write(A("%s.%s" % (db,table),_href=URL(\'select\',args=[db],vars=dict(query=qry))))\n                response.write(\'\\n            </th>\\n            <td>\\n              \', escape=False)\n                response.write(A(str(T(\'New Record\')),_href=URL(\'insert\',args=[db,table]),_class="btn btn-primary"))\n                response.write(\'\\n            </td>\\n          </tr>\\n          \', escape=False)\n                pass\n            response.write(\'\\n          \', escape=False)\n            pass\n        response.write(\'\\n        </table>\\n      </div>\\n      <div class="tab-pane" id="hooks">\\n      \', escape=False)\n        response.write(LOAD(\'appadmin\', \'hooks\', ajax=True))\n        response.write(\'\\n      </div>\\n  </div>\\n\', escape=False)\n    elif request.function==\'select\':\n        response.write(\'\\n  <h2>\', escape=False)\n        response.write(XML(str(T("Database %s select"))%A(request.args[0],_href=URL(\'index\'))))\n        response.write(\'\\n  </h2>\\n  \', escape=False)\n        if tb:\n            response.write(\'\\n  <h3>\', escape=False)\n            response.write(T(\'Traceback\'))\n            response.write(\'</h3>\\n  <pre>\\n    \', escape=False)\n            response.write(tb)\n            response.write(\'\\n  </pre>\\n  \', escape=False)\n            pass\n        response.write(\'\\n  \', escape=False)\n        if table:\n            response.write(\'\\n  \', escape=False)\n            response.write(A(str(T(\'New Record\')),_href=URL(\'insert\',args=[request.args[0],table]),_class="btn btn-primary", _role="button"))\n            response.write(\'<br/><br/>\\n  <hr />\\n    <h3>\', escape=False)\n            response.write(T("Rows in Table"))\n            response.write(\'</h3><br/>\\n   \', escape=False)\n        else:\n            response.write(\'\\n    <h3>\', escape=False)\n            response.write(T("Rows selected"))\n            response.write(\'</h3><br/>\\n   \', escape=False)\n            pass\n        response.write(\'\\n   \', escape=False)\n        response.write(form)\n        response.write(\'\\n   <p class="text-muted">\', escape=False)\n        response.write(T(\'The "query" is a condition like "db.table1.field1==\\\'value\\\'". Something like "db.table1.field1==db.table2.field2" results in a SQL JOIN.\'))\n        response.write(\'<br/>\\n      \', escape=False)\n        response.write(T(\'Use (...)&(...) for AND, (...)|(...) for OR, and ~(...)  for NOT to build more complex queries.\'))\n        response.write(\'<br/>\\n      \', escape=False)\n        response.write(T(\'"update" is an optional expression like "field1=\\\'newvalue\\\'". You cannot update or delete the results of a JOIN\'))\n        response.write(\'</p>\\n    <br/><br/>\\n    <h4>\', escape=False)\n        response.write(T("%s selected", nrows))\n        response.write(\'</h4>\\n    \', escape=False)\n        if start>0:\n            response.write(A(T(\'previous %s rows\') % step,_href=URL(\'select\',args=request.args[0],vars=dict(start=start-step)),_class="btn btn-primary"))\n            pass\n        response.write(\'\\n    \', escape=False)\n        if stop<nrows:\n            response.write(A(T(\'next %s rows\') % step,_href=URL(\'select\',args=request.args[0],vars=dict(start=start+step)),_class="btn btn-primary"))\n            pass\n        response.write(\'\\n    \', escape=False)\n        if rows:\n            response.write(\'\\n       <div style="overflow:auto; width:80%;">\\n       \', escape=False)\n            linkto = lambda f, t, r: URL(\'update\', args=[request.args[0], r, f]) if f else "#"\n            response.write(\'\\n       \', escape=False)\n            upload=URL(\'download\',args=request.args[0])\n            response.write(\'\\n       \', escape=False)\n            response.write(SQLTABLE(rows,linkto,upload,orderby=True,_class=\'table table-striped table-bordered sortable\'))\n            response.write(\'\\n       </div>\\n    \', escape=False)\n            pass\n        response.write(\'\\n    <br/><br/>\\n    <hr />\\n    <h3>\', escape=False)\n        response.write(T("Import/Export"))\n        response.write(\'</h3><br/>\\n    <a href="\', escape=False)\n        response.write(URL(\'csv\',args=request.args[0],vars=dict(query=query)))\n        response.write(\'" class="btn btn-primary">\', escape=False)\n        response.write(T("export as csv file"))\n        response.write(\'</a>\\n  \', escape=False)\n        response.write(formcsv or \'\')\n        response.write(\'\\n\\n\', escape=False)\n    elif request.function==\'insert\':\n        response.write(\'\\n  <h2>\', escape=False)\n        response.write(T("Database"))\n        response.write(\' \', escape=False)\n        response.write(A(request.args[0],_href=URL(\'index\')))\n        response.write(\'\\n    \', escape=False)\n        if hasattr(table,\'_primarykey\'):\n            response.write(\'\\n      \', escape=False)\n            fieldname=table._primarykey[0]\n            response.write(\'\\n      \', escape=False)\n            dbname=request.args[0]\n            response.write(\'\\n      \', escape=False)\n            tablename=request.args[1]\n            response.write(\'\\n      \', escape=False)\n            cond = table[fieldname].type in [\'string\',\'text\'] and \'!=""\' or \'>0\'\n            response.write(\'\\n      \', escape=False)\n            response.write(T("Table"))\n            response.write(\' \', escape=False)\n            response.write(A(tablename,_href=URL(\'select\',args=dbname,vars=dict(query=\'%s.%s.%s%s\'%(dbname,tablename,fieldname,cond)))))\n            response.write(\'\\n    \', escape=False)\n        else:\n            response.write(\'\\n      \', escape=False)\n            response.write(T("Table"))\n            response.write(\' \', escape=False)\n            response.write(A(request.args[1],_href=URL(\'select\',args=request.args[0],vars=dict(query=\'%s.%s.id>0\'%tuple(request.args[:2])))))\n            response.write(\'\\n    \', escape=False)\n            pass\n        response.write(\'\\n  </h2>\\n  <h3>\', escape=False)\n        response.write(T("New Record"))\n        response.write(\'</h3><br/>\\n  \', escape=False)\n        response.write(form)\n        response.write(\'\\n\', escape=False)\n    elif request.function==\'update\':\n        response.write(\'\\n  <h2>\', escape=False)\n        response.write(T("Database"))\n        response.write(\' \', escape=False)\n        response.write(A(request.args[0],_href=URL(\'index\')))\n        response.write(\'\\n    \', escape=False)\n        if hasattr(table,\'_primarykey\'):\n            response.write(\'\\n      \', escape=False)\n            fieldname=request.vars.keys()[0]\n            response.write(\'\\n      \', escape=False)\n            dbname=request.args[0]\n            response.write(\'\\n      \', escape=False)\n            tablename=request.args[1]\n            response.write(\'\\n      \', escape=False)\n            cond = table[fieldname].type in [\'string\',\'text\'] and \'!=""\' or \'>0\'\n            response.write(\'\\n      \', escape=False)\n            response.write(T("Table"))\n            response.write(\' \', escape=False)\n            response.write(A(tablename,_href=URL(\'select\',args=dbname,vars=dict(query=\'%s.%s.%s%s\'%(dbname,tablename,fieldname,cond)))))\n            response.write(\'\\n      \', escape=False)\n            response.write(T("Record"))\n            response.write(\' \', escape=False)\n            response.write(A(\'%s=%s\'%request.vars.items()[0],_href=URL(\'update\',args=request.args[:2],vars=request.vars)))\n            response.write(\'\\n    \', escape=False)\n        else:\n            response.write(\'\\n      \', escape=False)\n            response.write(T("Table"))\n            response.write(\' \', escape=False)\n            response.write(A(request.args[1],_href=URL(\'select\',args=request.args[0],vars=dict(query=\'%s.%s.id>0\'%tuple(request.args[:2])))))\n            response.write(\'\\n      \', escape=False)\n            response.write(T("Record id"))\n            response.write(\' \', escape=False)\n            response.write(A(request.args[2],_href=URL(\'update\',args=request.args[:3])))\n            response.write(\'\\n    \', escape=False)\n            pass\n        response.write(\'\\n  </h2>\\n  <h3>\', escape=False)\n        response.write(T("Edit current record"))\n        response.write(\'</h3><br/><br/>\', escape=False)\n        response.write(form)\n        response.write(\'\\n\\n\', escape=False)\n    elif request.function==\'state\':\n        response.write(\'\\n  <h2>\', escape=False)\n        response.write(T("Internal State"))\n        response.write(\'</h2>\\n  <h3>\', escape=False)\n        response.write(T("Current request"))\n        response.write(\'</h3>\\n  \', escape=False)\n        response.write(BEAUTIFY(request))\n        response.write(\'\\n  <br/><h3>\', escape=False)\n        response.write(T("Current response"))\n        response.write(\'</h3>\\n  \', escape=False)\n        response.write(BEAUTIFY(response))\n        response.write(\'\\n  <br/><h3>\', escape=False)\n        response.write(T("Current session"))\n        response.write(\'</h3>\\n  \', escape=False)\n        response.write(BEAUTIFY(session))\n        response.write(\'\\n\\n\\n\', escape=False)\n    elif request.function == \'ccache\':\n        response.write(\'\\n<h2>\', escape=False)\n        T("Cache")\n        response.write(\'</h2>\\n<div class="list">\\n\\n  <div class="list-header">\\n    <h3>\', escape=False)\n        T("Statistics")\n        response.write(\'</h3>\\n  </div>\\n\\n  <div class="content">\\n    <h4>\', escape=False)\n        response.write(T("Overview"))\n        response.write(\'</h4>\\n    <p>\', escape=False)\n        response.write(T.M("Number of entries: **%s**", total[\'entries\']))\n        response.write(\'</p>\\n    \', escape=False)\n        if total[\'entries\'] > 0:\n            response.write(\'\\n    <p>\', escape=False)\n            response.write(T.M("Hit Ratio: **%(ratio)s%%** (**%(hits)s** %%{hit(hits)} and **%(misses)s** %%{miss(misses)})",\n            dict( ratio=total[\'ratio\'], hits=total[\'hits\'], misses=total[\'misses\'])))\n            response.write(\'\\n    </p>\\n    <p>\\n      \', escape=False)\n            response.write(T("Size of cache:"))\n            response.write(\'\\n      \', escape=False)\n            if object_stats:\n                response.write(\'\\n        \', escape=False)\n                response.write(T.M("**%(items)s** %%{item(items)}, **%(bytes)s** %%{byte(bytes)}", dict(items=total[\'objects\'], bytes=total[\'bytes\'])))\n                response.write(\'\\n        \', escape=False)\n                if total[\'bytes\'] > 524287:\n                    response.write(\'\\n          \', escape=False)\n                    response.write(T.M("(**%.0d MB**)", total[\'bytes\'] / 1048576))\n                    response.write(\'\\n        \', escape=False)\n                    pass\n                response.write(\'\\n      \', escape=False)\n            else:\n                response.write(\'\\n        \', escape=False)\n                response.write(T.M("**not available** (requires the Python [[Pympler https://pypi.python.org/pypi/Pympler popup]] library)"))\n                response.write(\'\\n      \', escape=False)\n                pass\n            response.write(\'\\n    </p>\\n    <p>\\n      \', escape=False)\n            response.write(T.M("Cache contains items up to **%(hours)02d** %%{hour(hours)} **%(min)02d** %%{minute(min)} **%(sec)02d** %%{second(sec)} old.",\n            dict(hours=total[\'oldest\'][0], min=total[\'oldest\'][1], sec=total[\'oldest\'][2])))\n            response.write(\'\\n    </p>\\n    \', escape=False)\n            response.write(BUTTON(T(\'Cache Keys\'), _onclick=\'jQuery("#all_keys").toggle().toggleClass( "w2p_hidden" );\'))\n            response.write(\'\\n    <div class="w2p_hidden" id="all_keys">\\n      \', escape=False)\n            response.write(total[\'keys\'])\n            response.write(\'\\n    </div>\\n    <br />\\n    \', escape=False)\n            pass\n        response.write(\'\\n\\n    <h4>\', escape=False)\n        response.write(T("RAM"))\n        response.write(\'</h4>\\n    <p>\', escape=False)\n        response.write(T.M("Number of entries: **%s**", ram[\'entries\']))\n        response.write(\'</p>\\n    \', escape=False)\n        if ram[\'entries\'] > 0:\n            response.write(\'\\n    <p>\', escape=False)\n            response.write(T.M("Hit Ratio: **%(ratio)s%%** (**%(hits)s** %%{hit(hits)} and **%(misses)s** %%{miss(misses)})",\n            dict( ratio=ram[\'ratio\'], hits=ram[\'hits\'], misses=ram[\'misses\'])))\n            response.write(\'\\n    </p>\\n    <p>\\n      \', escape=False)\n            response.write(T("Size of cache:"))\n            response.write(\'\\n      \', escape=False)\n            if object_stats:\n                response.write(\'\\n        \', escape=False)\n                response.write(T.M("**%(items)s** items, **%(bytes)s** %%{byte(bytes)}", dict(items=ram[\'objects\'], bytes=ram[\'bytes\'])))\n                response.write(\'\\n        \', escape=False)\n                if ram[\'bytes\'] > 524287:\n                    response.write(\'\\n          \', escape=False)\n                    response.write(T.M("(**%.0d MB**)", ram[\'bytes\'] / 10485576))\n                    response.write(\'\\n        \', escape=False)\n                    pass\n                response.write(\'\\n      \', escape=False)\n            else:\n                response.write(\'\\n        \', escape=False)\n                response.write(T.M("``**not available**``:red (requires the Python [[Pympler https://pypi.python.org/pypi/Pympler popup]] library)"))\n                response.write(\'\\n      \', escape=False)\n                pass\n            response.write(\'\\n    </p>\\n    <p>\\n      \', escape=False)\n            response.write(T.M("RAM contains items up to **%(hours)02d** %%{hour(hours)} **%(min)02d** %%{minute(min)} **%(sec)02d** %%{second(sec)} old.",\n            dict(hours=ram[\'oldest\'][0], min=ram[\'oldest\'][1], sec=ram[\'oldest\'][2])))\n            response.write(\'\\n    </p>\\n    \', escape=False)\n            response.write(BUTTON(T(\'RAM Cache Keys\'), _onclick=\'jQuery("#ram_keys").toggle().toggleClass( "w2p_hidden" );\'))\n            response.write(\'\\n    <div class="w2p_hidden" id="ram_keys">\\n      \', escape=False)\n            response.write(ram[\'keys\'])\n            response.write(\'\\n    </div>\\n    <br />\\n    \', escape=False)\n            pass\n        response.write(\'\\n\\n    <h4>\', escape=False)\n        response.write(T("DISK"))\n        response.write(\'</h4>\\n    <p>\', escape=False)\n        response.write(T.M("Number of entries: **%s**", disk[\'entries\']))\n        response.write(\'</p>\\n    \', escape=False)\n        if disk[\'entries\'] > 0:\n            response.write(\'\\n      <p>\\n      \', escape=False)\n            response.write(T.M("Hit Ratio: **%(ratio)s%%** (**%(hits)s** %%{hit(hits)} and **%(misses)s** %%{miss(misses)})",\n            dict(ratio=disk[\'ratio\'], hits=disk[\'hits\'], misses=disk[\'misses\'])))\n            response.write(\'\\n      </p>\\n      <p>\\n      \', escape=False)\n            response.write(T("Size of cache:"))\n            response.write(\'\\n      \', escape=False)\n            if object_stats:\n                response.write(\'\\n        \', escape=False)\n                response.write(T.M("**%(items)s** %%{item(items)}, **%(bytes)s** %%{byte(bytes)}", dict( items=disk[\'objects\'], bytes=disk[\'bytes\'])))\n                response.write(\'\\n        \', escape=False)\n                if disk[\'bytes\'] > 524287:\n                    response.write(\'\\n          \', escape=False)\n                    response.write(T.M("(**%.0d MB**)", disk[\'bytes\'] / 1048576))\n                    response.write(\'\\n        \', escape=False)\n                    pass\n                response.write(\'\\n      \', escape=False)\n            else:\n                response.write(\'\\n        \', escape=False)\n                response.write(T.M("``**not available**``:red (requires the Python [[Pympler https://pypi.python.org/pypi/Pympler popup]] library)"))\n                response.write(\'\\n      \', escape=False)\n                pass\n            response.write(\'\\n      </p>\\n      <p>\\n      \', escape=False)\n            response.write(T.M("DISK contains items up to **%(hours)02d** %%{hour(hours)} **%(min)02d** %%{minute(min)} **%(sec)02d** %%{second(sec)} old.",\n            dict(hours=disk[\'oldest\'][0], min=disk[\'oldest\'][1], sec=disk[\'oldest\'][2])))\n            response.write(\'\\n      </p>\\n      \', escape=False)\n            response.write(BUTTON(T(\'Disk Cache Keys\'), _onclick=\'jQuery("#disk_keys").toggle().toggleClass( "w2p_hidden" );\'))\n            response.write(\'\\n      <div class="w2p_hidden" id="disk_keys">\\n      \', escape=False)\n            response.write(disk[\'keys\'])\n            response.write(\'\\n      </div>\\n      <br />\\n    \', escape=False)\n            pass\n        response.write(\'\\n  </div>\\n\\n  <div class="list-header">\\n    <h3>\', escape=False)\n        response.write(T("Manage Cache"))\n        response.write(\'</h3>\\n  </div>\\n\\n  <div class="content">\\n    <p>\\n      \', escape=False)\n        response.write(form)\n        response.write(\'\\n    </p>\\n  </div>\\n</div>\\n<div class="clear"></div>\\n\', escape=False)\n        pass\n    response.write(\'\\n\\n\', escape=False)\n    if request.function==\'d3_graph_model\':\n        response.write(\'\\n<h2>\', escape=False)\n        response.write(T("Graph Model"))\n        response.write(\'</h2>\\n  \', escape=False)\n        if not databases:\n            response.write(\'  \\n    \', escape=False)\n            response.write(T("No databases in this application"))\n            response.write(\'\\n  \', escape=False)\n        else:\n            response.write(\'    \\n    <div id="vis"></div>\\n      <link rel="stylesheet" href="\', escape=False)\n            response.write(URL(\'admin\',\'static\',\'css/d3_graph.css\'))\n            response.write(\'"/>\\n      <script>\\n        // Define the d3 input data\\n        \', escape=False)\n            from gluon.serializers import json\n            response.write(\'\\n        var nodes = \', escape=False)\n            response.write(XML(json(nodes)))\n            response.write(\';\\n        var links = \', escape=False)\n            response.write(XML(json(links)))\n            response.write(\';\\n        d3_graph();\\n      </script>\\n  \', escape=False)\n            pass\n        response.write(\'\\n\', escape=False)\n        pass\n    response.write(\'  \\n\\n\', escape=False)\n    if request.function == \'manage\':\n        response.write(\'\\n<h2>\', escape=False)\n        response.write(heading)\n        response.write(\'</h2>\\n<ul class="nav nav-tabs">\\n  \', escape=False)\n        for k, tablename in enumerate(tablenames):\n            response.write(\'\\n  <li\', escape=False)\n            response.write(XML(\' class="active"\') if k == 0 else \'\')\n            response.write(\'>\\n    <a href="#table-\', escape=False)\n            response.write(tablename)\n            response.write(\'" data-toggle="tab">\', escape=False)\n            response.write(labels[k])\n            response.write(\'</a>\\n  </li>\\n  \', escape=False)\n            pass\n        response.write(\'\\n</ul>\\n\\n<div class="tab-content">\\n  \', escape=False)\n        for k, tablename in enumerate(tablenames):\n            response.write(\'\\n  <div class="tab-pane\', escape=False)\n            response.write(XML(\' active\') if k == 0 else \'\')\n            response.write(\'" id="table-\', escape=False)\n            response.write(tablename)\n            response.write(\'">\\n    \', escape=False)\n            response.write(LOAD(f=\'manage.load\', args=[request.args(0), k], ajax=True))\n            response.write(\'\\n  </div>\\n  \', escape=False)\n            pass\n        response.write(\'\\n</div>\\n\', escape=False)\n        pass\n    response.write(\'\\n\\n  </div>\\n</div>\\n\', escape=False)\n    response.write(\'\\n      \', escape=False)\n    response.write(response.toolbar() if response.show_toolbar else \'\')\n    response.write(\'\\n    </div>\\n    \', escape=False)\n    response.write(\' <!-- this is default footer -->\\n    <footer id="noprint" class="footer container-fluid ">\\n      <div class="row">\\n        <div class="col-md-12">\\n          <div class="copyright pull-left">\', escape=False)\n    response.write(T(\'Copyright\'))\n    response.write(\' &#169; \', escape=False)\n    response.write(request.now.year)\n    response.write(\'</div>\\n          <div id="poweredBy" class="pull-right">\\n              Suporte <a href="https://api.whatsapp.com/send?phone=5588981126816">(88)98112-6816</a>\\n            </div>\\n        </div>\\n      </div>\\n    </footer>\\n <footer class="footer container-fluid d-none d-print-block">\\n      <div class="row">\\n        <div class="col-md-12">\\n          <div class="copyright pull-left">Suporte - (88)98112-6816</div>\\n          <div id="poweredBy" class="pull-right">\\n             \', escape=False)\n    if auth.user:\n        response.write(auth.user.first_name)\n        response.write(\' \', escape=False)\n        response.write(auth.user.last_name)\n    else:\n        response.write(\'Aluminum System\', escape=False)\n        pass\n    response.write(\'\\n          </div>\\n        </div>\\n      </div>\\n    </footer>\\n    \', escape=False)\n    response.write(\'\\n    <!-- The javascript =============================== -->\\n    <script src="\', escape=False)\n    response.write(URL(\'static\',\'js/bootstrap.bundle.min.js\'))\n    response.write(\'"></script>\\n    <script src="\', escape=False)\n    response.write(URL(\'static\',\'js/web2py-bootstrap4.js\'))\n    response.write(\'"></script>\\n    \', escape=False)\n    response.write(\'\\n    \', escape=False)\n    if response.google_analytics_id:\n        response.write(\'\\n    <!-- Analytics ==================================== -->\\n    <script src="\', escape=False)\n        response.write(URL(\'static\',\'js/analytics.min.js\'))\n        response.write(\'"></script>\\n    <script type="text/javascript">\\n      analytics.initialize({\\n      \\\'Google Analytics\\\':{trackingId:\\\'\', escape=False)\n        response.write(response.google_analytics_id)\n        response.write("\'}\\n      });\\n    </script>\\n    ", escape=False)\n        pass\n    response.write(\'\\n  </body>\\n</html>\\n\', escape=False)'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'None\n'
p11
s.